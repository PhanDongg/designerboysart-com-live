<!-- /sections/section-tab-collection.liquid -->
{%- liquid
  assign width = section.settings.width
  assign layout = section.settings.layout
  assign layout_desktop = section.settings.layout_desktop
  assign layout_mobile = section.settings.layout_mobile
  assign grid_columns = section.settings.grid
  assign grid_rows = section.settings.rows
  assign title = section.settings.title
  assign text = section.settings.text
  assign color_scheme = 'color-' | append: section.settings.color_scheme
  assign animation_order = 0
  assign animation_anchor = '#TabCollections--' | append: section.id
  assign has_content = false

  assign product_limit = section.settings.product_limit
  if layout_desktop == 'grid'
    assign product_limit = grid_columns | times: grid_rows
  endif

  if title != blank or text != blank
    assign has_content = true
  endif

  assign columns_desktop = grid_columns | plus: 0
  assign columns_medium = 3
  assign columns_small = 2
  assign columns_mobile = layout_mobile | plus: 0

  if columns_desktop == 2 or columns_desktop == 4
    assign columns_medium = 2
  endif

  capture product_grid_classes
    echo 'grid'
    if layout_mobile == 'slider'
      echo ' grid--mobile-slider'
    endif

    if layout_desktop == 'slider'
      echo ' grid--slider'
    endif
  endcapture
-%}

{%- capture section_text -%}
  {%- if has_content -%}
    <div class="grid__heading-text">
      {%- if title != blank -%}
        {%- liquid
          assign animation_order = animation_order | plus: 1
          assign heading_tag = 'h2'

          unless section.settings.heading_tag == 'automatic' or section.settings.heading_tag == blank
            assign heading_tag = section.settings.heading_tag
          endunless
        -%}

        <{{ heading_tag }} class="grid__heading {{ section.settings.heading_font_size }}"
          data-aos="hero"
          data-aos-anchor="{{ animation_anchor }}"
          data-aos-order="{{ animation_order }}">{{ title }}</{{ heading_tag }}>
      {%- endif -%}

      {%- if text != blank -%}
        {%- assign animation_order = animation_order | plus: 1-%}

        <div class="grid__description {{ section.settings.text_font_size }}"
          data-aos="hero"
          data-aos-anchor="{{ animation_anchor }}"
          data-aos-order="{{ animation_order }}">
          {{ text }}
        </div>
      {%- endif -%}
    </div>
  {%- endif -%}
{%- endcapture -%}

{%- style -%}
  #TabCollections--{{ section.id }} {
    --PT: {{ section.settings.padding_top }}px;
    --PB: {{ section.settings.padding_bottom }}px;

    {%- if has_content -%}
      --PT-MOBILE: max({{ section.settings.padding_top }}px, calc(var(--gutter) * 2));
    {%- endif -%}

    --COLUMNS: {{ columns_desktop }};
    --COLUMNS-MEDIUM: {{ columns_medium }};
    --COLUMNS-SMALL: {{ columns_small }};
    --COLUMNS-MOBILE: {{ columns_mobile }};
  }
{%- endstyle -%}

<section id="TabCollections--{{ section.id }}"
  class="index-tab-collections section-padding {{ color_scheme }}"
  data-section-id="{{ section.id }}"
  data-section-type="product-grid">
  {%- if section.blocks.size > 0 -%}
    {%- liquid
      assign current_idx = 0

      if section.blocks.size == 3 and layout == 'stacked'
        assign current_idx = 1
      endif

      assign tabs_content = ''
      assign tabs_navigation = ''
    -%}

    <div class="tabs-collections {{ width }}" data-tabs-holder>
      {%- for block in section.blocks -%}
        {%- liquid
          assign block_index = forloop.index
          
          assign featured_collection_title = block.settings.title | default: featured_collection.title | default: 'Collection'
          assign products_count = featured_collection.products_count | default: 6
          assign animation_order = animation_order | plus: 1

          assign block_product_limit = product_limit

        -%}

        {%- capture tabs_navigation -%}
          {{ tabs_navigation }}

          <li class="tab-link tab-link-{{ forloop.index0 }}{% if forloop.index0 == current_idx %} current{% endif %}"
            data-tab="{{ forloop.index0 }}"
            data-block-id="{{ block.id }}"
            data-aos="hero"
            data-aos-anchor="{{ animation_anchor }}"
            data-aos-order="{{ animation_order }}"
            tabindex="0"
            {{ block.shopify_attributes }}>
            <span>{{ featured_collection_title }}</span>
          </li>
        {%- endcapture -%}

        {%- capture tabs_content -%}
          {{ tabs_content }}

          <div class="tab-content tab-content-{{ forloop.index0 }}{% if forloop.index0 == current_idx %} current{% endif %}" id="tab--{{ block.id }}">
            <div class="grid-container">
              <div class="grid-outer">
                {% assign selected_group = block.settings.featured_collection  | downcase %}
                {%- capture product_items -%}
                    {% assign frames = shop.metaobjects['frame_options'].values %}
                    {% assign total_frames = frames.size %}

                      {%- for frame in frames limit: block_product_limit -%}
                        {% assign frame_group = frame.frame_group.value | downcase %}
                        {% if frame_group contains selected_group %}
                           {%- render 'metaobject-frame-grid', metaobject: frame, index: forloop.index, frame_group: selected_group -%}
                        {% endif %}
                      {%- endfor -%}
                {%- endcapture -%}

                {%- if layout_desktop == 'slider' -%}
                  <grid-slider align-arrows>
                    <div class="{{ product_grid_classes }}" data-grid-slider>
                      {{ product_items }}
                    </div>
                  </grid-slider>
                {%- else -%}
                  <div class="{{ product_grid_classes }}">
                    {{ product_items }}
                  </div>
                {%- endif -%}
              </div>
              {% comment %}
              <div id="load-more-container">
                <button id="loadMoreBtn" class="btn btn--text  btn--primary"><span>See More</span></button>
              </div>
              {% endcomment %}
            </div>
            <script>
              document.addEventListener("DOMContentLoaded", function () {
                  const gridItems = document.querySelectorAll("#tab--{{ block.id }} .frame-grid"); 
                  const loadMoreBtn = document.getElementById("loadMoreBtn");
                  let visibleCount = 100; // Start by showing 8 items
                  const increment = 4; // Number of items to show each time

                  // Sort the grid items based on the data-order attribute
                  const sortedGridItems = Array.from(gridItems).sort((a, b) => {
                      return a.getAttribute('data-frame-{{ selected_group }}-order') - b.getAttribute('data-frame-{{ selected_group }}-order');
                  });

                  // Re-append sorted items to the parent container
                  const parent = gridItems[0].parentNode;
                  sortedGridItems.forEach(item => parent.appendChild(item));

                  // Hide all items initially except the first 8
                  sortedGridItems.forEach((item, index) => {
                      if (index >= visibleCount) item.style.display = "none";
                  });

                  loadMoreBtn.addEventListener("click", function () {
                      let newVisibleCount = visibleCount + increment;
                      
                      // Show the next set of items
                      sortedGridItems.forEach((item, index) => {
                          if (index < newVisibleCount) item.style.display = "block";
                      });

                      visibleCount = newVisibleCount; // Update visible count

                      // Hide button if all items are visible
                      if (visibleCount >= sortedGridItems.length) {
                          loadMoreBtn.style.display = "none";
                      }
                  });
              });

            </script>            
          </div>
        {%- endcapture -%}
      {%- endfor -%}

      {%- liquid
        assign show_tabs_navigation = false
        if tabs_navigation != '' and section.blocks.size > 1
          assign show_tabs_navigation = true
        endif

        if section_text != blank
          case layout
            when 'inline'
              assign text_layout = ' grid__heading-holder--inline'
            when 'stacked'
              assign text_layout = ' text-center'
            when 'left'
              assign text_layout = ' text-left'
          endcase
        endif
      -%}

      {%- if show_tabs_navigation or section_text != blank -%}
        <div class="tabs__head tabs-collections__head">
          <div class="grid__heading-holder{{ text_layout }}">
            {%- if section_text != blank -%}
              {{ section_text }}
            {%- endif -%}

            {%- if show_tabs_navigation -%}
              <div class="grid__heading-actions">
                <div class="tabs__nav">
                  <ul class="tabs{% if layout == 'stacked' %} text-center{% endif %}" data-scrollbar data-scrollbar-slider>
                    {{ tabs_navigation }}
                  </ul>

                  <button type="button" class="tabs__arrow tabs__arrow--prev tabs-collections__arrow tabs-collections__arrow--prev is-hidden" data-scrollbar-arrow-prev>
                    {%- render 'icon-nav-arrow-left' -%}
                    <span class="visually-hidden">{{ 'products.general.see_all' | t }}</span>
                  </button>

                  <button type="button" class="tabs__arrow tabs__arrow--next tabs-collections__arrow tabs-collections__arrow--next is-hidden" data-scrollbar-arrow-next>
                    {%- render 'icon-nav-arrow-right' -%}
                    <span class="visually-hidden">{{ 'products.general.see_all' | t }}</span>
                  </button>
                </div>
              </div>
            {%- endif -%}
          </div>
        </div>
      {%- endif -%}

      {{ tabs_content }}
    </div>
  {%- else -%}
    {%- assign animation_order = animation_order | plus: 1 -%}
    <div class="grid-container text-center"
      data-aos="hero"
      data-aos-anchor="{{ animation_anchor }}"
      data-aos-order="{{ animation_order }}">
      {%- if section_text != blank -%}
        <div class="grid__heading-holder">
          {{ section_text }}
        </div>
      {%- endif -%}

      {% render 'no-blocks' %}
    </div>
  {%- endif -%}

</section>


{% schema %}
{
  "name": "Tab Frames",
  "settings": [
    {
      "type": "header",
      "content": "Typography"
    },    
    {
      "label": "Heading",
      "id": "title",
      "type": "text"
    },
    {
      "type": "select",
      "id": "heading_font_size",
      "label": "Heading size",
      "default": "heading-medium",
      "options": [
        {"value": "heading-mini", "label": "Mini"},
        {"value": "heading-x-small", "label": "Extra small"},
        {"value": "heading-small", "label": "Small"},
        {"value": "heading-medium", "label": "Medium"},
        {"value": "heading-large", "label": "Large"},
        {"value": "heading-x-large", "label": "Extra large"}
      ]
    },
    {
      "type": "richtext",
      "id": "text",
      "label": "Text"
    },
    {
      "type": "select",
      "id": "text_font_size",
      "label": "Text size",
      "info": "Automatically generated by the base size. Applies only when content in Text field is set to Paragraph.",
      "default": "body-medium",
      "options": [
        {"value": "body-x-small", "label": "Extra small"},
        {"value": "body-small", "label": "Small"},
        {"value": "body-medium", "label": "Medium"},
        {"value": "body-large", "label": "Large"},
        {"value": "body-x-large", "label": "Extra large"}
      ]
    },
    {
      "type": "select",
      "id": "layout"  ,
      "label": "Layout",
      "options": [
        {
          "value": "inline",
          "label": "In-line"
        },
        {
          "value": "stacked",
          "label": "Center"
        },
        {
          "value": "left",
          "label": "Left"
        }
      ],
      "default": "stacked"
    },
    {
      "type": "header",
      "content": "Desktop"
    },
    {
      "type": "select",
      "id": "layout_desktop",
      "label": "Layout",
      "options": [
        {
          "value": "grid",
          "label": "Grid"
        },
        {
          "value": "slider",
          "label": "Slider"
        }
      ],
      "default": "slider"
    },
    {
      "type": "header",
      "content": "Mobile"
    },
    {
      "type": "select",
      "id": "layout_mobile",
      "label": "Layout",
      "options": [
        {
          "value": "1",
          "label": "1 item per row"
        },
        {
          "value": "2",
          "label": "2 items per row"
        },
        {
          "value": "slider",
          "label": "Slider"
        }
      ],
      "default": "slider"
    },
    {
      "type": "header",
      "content": "Slider",
      "info": "Applies only when layout is set to Slider"
    },
    {
      "type":    "range",
      "id":      "product_limit",
      "min":     4,
      "max":     12,
      "step":    1,
      "label":   "Product limit",
      "default": 6
    },
    {
      "type": "header",
      "content": "Grid",
      "info": "Applies only when layout is set to Grid"
    },
    {
      "type":    "range",
      "id":      "grid",
      "label":   "Products per row",
      "min":     2,
      "max":     6,
      "step":    1,
      "default": 4
    },
    {
      "type":    "range",
      "id":      "rows",
      "label":   "Number of rows",
      "min":     1,
      "max":     30,
      "step":    1,
      "default": 3
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "default": "scheme_1",
      "label": "Color scheme"
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "select",
      "id": "width",
      "label": "Width",
      "default": "wrapper--full-padded",
      "options": [
        {"value": "wrapper--full", "label": "Full width"},
        {"value": "wrapper--full-padded", "label": "Full width padded"},
        {"value": "wrapper", "label": "Normal"}
      ]
    },    
    {
      "type": "header",
      "content": "Padding"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "label": "Top",
      "default": 32
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "label": "Bottom",
      "default": 32
    },
    {
      "type": "header",
      "content": "Advanced"
    },
    {
      "type": "select",
      "id": "heading_tag",
      "label": "Heading SEO tag",
      "default": "automatic",
      "options": [
        {"value": "automatic", "label": "Automatic"},
        {"value": "h1", "label": "H1"},
        {"value": "h2", "label": "H2"},
        {"value": "h3", "label": "H3"},
        {"value": "h4", "label": "H4"},
        {"value": "h5", "label": "H5"},
        {"value": "h6", "label": "H6"}
      ]
    }
  ],
  "blocks":[
    {
      "type": "select",
      "name": "Frame Group",
      "limit": 4,
      "settings": [
        {
          "type": "header",
          "content": "Frame Group"
        },
        {
          "label": "Heading",
          "id": "title",
          "type": "text"
        },
        {
          "type": "select",
          "id": "featured_collection",
          "label": "Frame Group",
          "default": "Prints",
          "options": [
            {"value": "Prints", "label": "Prints"},
            {"value": "Canvas", "label": "Canvas"},
            {"value": "Mirrors", "label": "Mirrors"},
            {"value": "Textural", "label": "Textural"}
          ]          
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Tab Frames"
    }
  ],  
  "disabled_on": {
    "groups": ["header", "aside", "footer"]
  }
}
{% endschema %}

